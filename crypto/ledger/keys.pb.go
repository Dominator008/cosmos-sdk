// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/crypto/ledger/keys.proto

package ledger

import (
	fmt "fmt"
	hd "github.com/cosmos/cosmos-sdk/crypto/hd"
	secp256k1 "github.com/cosmos/cosmos-sdk/crypto/keys/secp256k1"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PrivKeyLedgerSecp256K1 implements PrivKey, calling the ledger nano we
// cache the PubKey from the first call to use it later.
type PrivKeyLedgerSecp256K1 struct {
	// CachedPubKey should be private, but we want to encode it via
	// go-amino so we can view the address later, even without having the
	// ledger attached.
	CachedPubKey *secp256k1.PubKey `protobuf:"bytes,1,opt,name=cached_pub_key,json=cachedPubKey,proto3" json:"cached_pub_key,omitempty"`
	Path         *hd.BIP44Params   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *PrivKeyLedgerSecp256K1) Reset()         { *m = PrivKeyLedgerSecp256K1{} }
func (m *PrivKeyLedgerSecp256K1) String() string { return proto.CompactTextString(m) }
func (*PrivKeyLedgerSecp256K1) ProtoMessage()    {}
func (*PrivKeyLedgerSecp256K1) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3c820f2dc9a02b, []int{0}
}
func (m *PrivKeyLedgerSecp256K1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivKeyLedgerSecp256K1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivKeyLedgerSecp256K1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivKeyLedgerSecp256K1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivKeyLedgerSecp256K1.Merge(m, src)
}
func (m *PrivKeyLedgerSecp256K1) XXX_Size() int {
	return m.Size()
}
func (m *PrivKeyLedgerSecp256K1) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivKeyLedgerSecp256K1.DiscardUnknown(m)
}

var xxx_messageInfo_PrivKeyLedgerSecp256K1 proto.InternalMessageInfo

func (m *PrivKeyLedgerSecp256K1) GetCachedPubKey() *secp256k1.PubKey {
	if m != nil {
		return m.CachedPubKey
	}
	return nil
}

func (m *PrivKeyLedgerSecp256K1) GetPath() *hd.BIP44Params {
	if m != nil {
		return m.Path
	}
	return nil
}

func init() {
	proto.RegisterType((*PrivKeyLedgerSecp256K1)(nil), "cosmos.crypto.ledger.PrivKeyLedgerSecp256K1")
}

func init() { proto.RegisterFile("cosmos/crypto/ledger/keys.proto", fileDescriptor_5c3c820f2dc9a02b) }

var fileDescriptor_5c3c820f2dc9a02b = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xce, 0x2f, 0xce,
	0xcd, 0x2f, 0xd6, 0x4f, 0x2e, 0xaa, 0x2c, 0x28, 0xc9, 0xd7, 0xcf, 0x49, 0x4d, 0x49, 0x4f, 0x2d,
	0xd2, 0xcf, 0x4e, 0xad, 0x2c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x81, 0x28, 0xd0,
	0x83, 0x28, 0xd0, 0x83, 0x28, 0x90, 0x52, 0x42, 0xd5, 0x56, 0x9c, 0x9a, 0x5c, 0x60, 0x64, 0x6a,
	0x96, 0x6d, 0x88, 0xa4, 0x53, 0x4a, 0x15, 0x55, 0x4d, 0x46, 0x8a, 0x7e, 0x99, 0x61, 0x52, 0x6a,
	0x49, 0xa2, 0xa1, 0x7e, 0x46, 0x4a, 0x41, 0x62, 0x49, 0x06, 0x44, 0x99, 0xd2, 0x2c, 0x46, 0x2e,
	0xb1, 0x80, 0xa2, 0xcc, 0x32, 0xef, 0xd4, 0x4a, 0x1f, 0xb0, 0xe1, 0xc1, 0x30, 0xc3, 0x84, 0x5c,
	0xb9, 0xf8, 0x92, 0x13, 0x93, 0x33, 0x52, 0x53, 0xe2, 0x0b, 0x4a, 0x93, 0xe2, 0xb3, 0x53, 0x2b,
	0x25, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0xe4, 0xf5, 0x50, 0x1d, 0x05, 0xb7, 0x5e, 0x2f, 0xa0,
	0x34, 0xc9, 0x3b, 0xb5, 0x32, 0x88, 0x07, 0xa2, 0x0d, 0xc2, 0x13, 0xb2, 0xe4, 0x62, 0x01, 0xd9,
	0x27, 0xc1, 0x04, 0xd6, 0xac, 0x8a, 0xa6, 0x39, 0x23, 0x45, 0x0f, 0xea, 0x2e, 0x3d, 0x27, 0xcf,
	0x00, 0x13, 0x93, 0x80, 0xc4, 0xa2, 0xc4, 0xdc, 0xe2, 0x20, 0xb0, 0x16, 0x27, 0x97, 0x13, 0x8f,
	0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b,
	0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x4a, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2,
	0x4b, 0xce, 0xcf, 0xd5, 0x87, 0x79, 0x14, 0x4c, 0xe9, 0x16, 0xa7, 0x64, 0xa3, 0x06, 0x67, 0x12,
	0x1b, 0xd8, 0xa7, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x30, 0x11, 0x48, 0x6d, 0x01,
	0x00, 0x00,
}

func (m *PrivKeyLedgerSecp256K1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivKeyLedgerSecp256K1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivKeyLedgerSecp256K1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeys(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CachedPubKey != nil {
		{
			size, err := m.CachedPubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeys(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeys(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeys(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrivKeyLedgerSecp256K1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CachedPubKey != nil {
		l = m.CachedPubKey.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func sovKeys(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeys(x uint64) (n int) {
	return sovKeys(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrivKeyLedgerSecp256K1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivKeyLedgerSecp256K1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivKeyLedgerSecp256K1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedPubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CachedPubKey == nil {
				m.CachedPubKey = &secp256k1.PubKey{}
			}
			if err := m.CachedPubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &hd.BIP44Params{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeys(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeys
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeys
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeys
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeys        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeys          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeys = fmt.Errorf("proto: unexpected end of group")
)
